#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('skeleton-express:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 

 
/**
 * Normalize a port into a number, string, or false.
 */

/***
 * 
 * Meu socket
 * 
 */

const io=require('socket.io')(server);



io.on('connect',socket=>{

  let mesa=['Mesa 00', 'Mesa 01', 'Mesa 02', 'Mesa 03', 'Mesa 04'];
  let menu=[
    {produto:'Podrao da rita', valor: '25,50'},
    {produto:'X-Burgue', valor: '15,00'},
    {produto:'Misto Frio', valor: '10,50'},
    {produto:'Melancia', valor: '20,00'},
    {produto:'Pao Vegano', valor: '13,00'},
  ]

  console.log('Server On '+socket.id);

  socket.on('pedido',data=>{

    let baseDeDados={mesa:data.mesa,produto:menu[data.produto].produto,valor:menu[data.produto].valor}
    
    socket.broadcast.emit('painel',baseDeDados);


    //socket.broadcast.emit('painel',baseDeDados);
    //socket.emit('teste',baseDeDados);
    //console.log(baseDeDados);
    //console.log(data);
  })
})


function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
